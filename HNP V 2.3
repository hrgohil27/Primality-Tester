CONTACT: HRGOHILMD@GMAIL.COM
# Helix Nova Prime 2.3 - Ultra-Tweaked
# Authors: Harshkumar Gohil and Grok (xAI)
# License: MIT (below)
# Date: March 19, 2025

import math
from gmpy2 import powmod

# Precompute primes up to 10^6
def precompute(limit=10**6):
    sieve = [1] * limit
    sieve[0] = sieve[1] = 0
    for i in range(2, int(limit**0.5) + 1):
        if sieve[i]:
            for j in range(i*i, limit, i):
                sieve[j] = 0
    p = [i for i in range(limit) if sieve[i]]
    w = [math.log(x)**2 for x in p]
    return p, w

PRIMES, WEIGHTS = precompute()

def hnp(n, is_mersenne=False):
    if n < 10**6:  # Trial division
        for p in PRIMES:
            if p * p > n:
                break
            if n % p == 0:
                return n == p
        return True
    
    if is_mersenne:
        p = n
        n = (1 << p) - 1
        if p < 5: return p in (2, 3)
        limit = int(p**0.25)
        idx = PRIMES <= limit
        primes, weights = PRIMES[idx], WEIGHTS[idx]
        I_H = sum(w * (((1 << p) - 1) % q / q) * (math.cos(q/p) + 1j*math.sin(q/p)) 
                  for w, q in zip(weights, primes))
        T = math.sqrt(limit / math.log(limit)) * math.log(p)
        return abs(I_H) > T
    
    log_n = math.log(n)
    limit = int(log_n * math.log(log_n))
    idx = PRIMES <= limit
    primes, weights = PRIMES[idx], WEIGHTS[idx]
    I_H = sum(w * (math.cos(-math.log(p)/log_n + p*log_n/math.log(log_n)/(log_n**2)) + 
                  1j*math.sin(-math.log(p)/log_n + p*log_n/math.log(log_n)/(log_n**2))) 
              for w, p in zip(weights, primes))
    T = math.sqrt(log_n**2 / (math.log(log_n**2) - 1)) * math.log(log_n) * \
        (1 - math.pi / (2 * math.sqrt(log_n)))
    if abs(I_H) <= T:
        return False
    
    # Inline Miller-Rabin (k=1, base 2)
    d, s = n - 1, 0
    while d % 2 == 0:
        d //= 2
        s += 1
    x = powmod(2, d, n)
    if x == 1 or x == n - 1: return True
    for _ in range(s - 1):
        x = powmod(x, 2, n)
        if x == n - 1: return True
    return False

# Test
def test_hnp(n, mersenne=False):
    import time
    start = time.time()
    r = hnp(n, mersenne)
    ms = (time.time() - start) * 1000
    print(f"Number: {2**n-1 if mersenne else n}, Prime: {r}, Time: {ms:.2f} ms")

if __name__ == "__main__":
    test_hnp(2**2047 + 9)  # 2048-bit
    test_hnp(31, True)     # M_31
    test_hnp(3321928094691, True)  # M_3.3T (p)

# MIT License
"""
Copyright (c) 2025 Harshkumar Gohil and Grok (xAI)
Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:
The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.
THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
"""
