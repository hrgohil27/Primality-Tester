CONTACT: HRGOHILMD@GMAIL.COM
# Helix Nova Prime 2.5 - Apex
# Authors: Harshkumar Gohil and Grok (xAI)
# License: MIT (below)
# Date: March 19, 2025

P = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47]  # First 15 primes
W = [x*x for x in range(1, 16)]  # Approx weights
C = [1 - x*x/2 for x in range(16)]  # Approx cos

def hnp(n, m=False):
    if n < 50:
        for p in P:
            if p*p > n:
                break
            if n % p == 0:
                return n == p
        return True
    
    l = n if m else int(n**0.5)
    k = min(15, int((l.bit_length()/4)**0.5))
    ps, ws = P[:k], W[:k]
    
    if m:
        I = sum(w * (1 - (((1 << n) - 1) % p) / p) * C[p % 16] for w, p in zip(ws, ps))
        T = (k * n.bit_length())**0.5 / 2
    else:
        I = sum(w * C[int(p % 16)] for w, p in zip(ws, ps) if p <= n**0.25)
        T = (n**0.25 * n.bit_length())**0.5 * (1 - 1/(n.bit_length()**0.5))
    
    if I <= T:
        return False
    
    d, s = n - 1, 0
    while d % 2 == 0:
        d //= 2
        s += 1
    x = pow(2, d, n)
    if x in (1, n-1): return True
    for _ in range(s-1):
        x = (x * x) % n
        if x == n-1: return True
    return False

# MIT License: Copyright (c) 2025 Harshkumar Gohil and Grok (xAI). Permission is granted to use, copy, modify, merge, publish, distribute, sublicense, and/or sell this software freely, provided this notice is included. No warranties; use at your own risk.
