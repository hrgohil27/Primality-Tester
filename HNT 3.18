"""
Helix Nova Prime Universal (HNP-U) 3.18 - Advanced Prime Pattern Predictor with GPU and Generalization
Authors: Harshkumar Gohil and Grok (xAI)
License: MIT License
Date: April 5, 2025
Description: Mersenne tester with helical predictors for triplets, twins, quadruplets, and custom patterns
"""

import numpy as np
import math
from gmpy2 import mpz, mul, sub, add, bit_length, invert
from concurrent.futures import ThreadPoolExecutor
import logging
from typing import List, Optional, Tuple
import time
import pickle
import os
try:
    import cupy as cp
    GPU_AVAILABLE = True
except ImportError:
    GPU_AVAILABLE = False
    cp = np  # Fallback to NumPy if CuPy unavailable

# Configure logging
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')

class HelixNovaPrimeU:
    """Advanced HNP-U with GPU acceleration, pattern generalization, and checkpointing"""
    
    def __init__(self, small_prime_limit: int = 10**8, threads: int = 8, fft_threshold: int = 10000, use_gpu: bool = True):
        self.small_prime_limit = min(small_prime_limit, 10**9)
        self.threads = max(1, min(threads, 16))
        self.fft_threshold = fft_threshold
        self.use_gpu = use_gpu and GPU_AVAILABLE
        self._small_primes = self._generate_small_primes()
        self._logger = logging.getLogger(__name__)
        self._checkpoint_file = "hnp_checkpoint.pkl"

    def _generate_small_primes(self) -> List[int]:
        """Generate small primes efficiently with NumPy"""
        limit = self.small_prime_limit
        sieve = np.ones(limit, dtype=bool)
        sieve[0:2] = False
        for i in range(2, int(limit ** 0.5) + 1):
            if sieve[i]:
                sieve[i * i:limit:i] = False
        return np.where(sieve)[0].tolist()

    def _is_prime_fast(self, n: int) -> bool:
        """Fast primality test for general numbers"""
        if n < 2:
            return False
        if n == 2 or n == 3:
            return True
        if n % 2 == 0 or n % 3 == 0:
            return False
        for i in range(5, int(math.sqrt(n)) + 1, 6):
            if n % i == 0 or n % (i + 2) == 0:
                return False
        return True if n < self.small_prime_limit else self._miller_rabin_simple(n)

    def _miller_rabin_simple(self, n: int) -> bool:
        """Simple Miller-Rabin for large numbers"""
        if n < 2:
            return False
        bases = [2, 3, 5, 7, 11, 13, 17]
        d, s = n - 1, 0
        while d % 2 == 0:
            d //= 2
            s += 1
        for a in bases:
            if a >= n:
                break
            x = pow(a, d, n)
            if x == 1 or x == n - 1:
                continue
            for _ in range(s - 1):
                x = (x * x) % n
                if x == n - 1:
                    break
            else:
                return False
        return True

    def _montgomery_mult(self, a: mpz, b: mpz, m: mpz, n: int, r: int, m_inv: mpz) -> mpz:
        """Montgomery multiplication for modulo 2^n - 1"""
        t = mul(a, b)
        u = mul(t & (2**r - 1), m_inv) & (2**r - 1)
        result = (t + mul(u, m)) >> r
        if result >= m:
            result -= m
        if result == m:
            result = mpz(0)
        return result

    def _to_montgomery(self, x: mpz, m: mpz, r: int) -> mpz:
        return (x << r) % m

    def _from_montgomery(self, x: mpz, m: mpz, r: int, m_inv: mpz) -> mpz:
        return self._montgomery_mult(x, mpz(1), m, r, r, m_inv)

    def _fft_mult(self, a: mpz, b: mpz, m: int, n: int) -> mpz:
        """FFT-based multiplication modulo 2^n - 1, GPU-accelerated if available"""
        digits_a = [int(d) for d in str(a)][::-1]
        digits_b = [int(d) for d in str(b)][::-1]
        len_a, len_b = len(digits_a), len(digits_b)
        fft_len = 2 ** int(math.ceil(math.log2(len_a + len_b)))
        xp = cp if self.use_gpu else np
        padded_a = xp.array(digits_a + [0] * (fft_len - len_a), dtype=xp.float64)
        padded_b = xp.array(digits_b + [0] * (fft_len - len_b), dtype=xp.float64)
        fft_a = xp.fft.fft(padded_a)
        fft_b = xp.fft.fft(padded_b)
        fft_prod = fft_a * fft_b
        prod = xp.fft.ifft(fft_prod).real
        result = xp.zeros(fft_len, dtype=xp.int64)
        carry = 0
        for i in range(fft_len):
            val = int(prod[i] + carry + 0.5)
            result[i] = val % 10
            carry = val // 10
        s_str = ''.join(map(str, result.get() if self.use_gpu else result[::-1])).lstrip('0') or '0'
        s = mpz(s_str)
        while s >= m:
            s -= m
        return s

    def _lucas_lehmer_fft(self, n: int) -> bool:
        """Lucas-Lehmer test with FFT multiplication, checkpointing for large n"""
        if n == 2:
            return True
        if not self._is_prime_fast(n):
            self._logger.debug(f"n={n} is not prime, skipping Lucas-Lehmer")
            return False
        
        m = mpz(2**n - 1)
        iterations = n - 2
        start_time = time.time()
        checkpoint = self._load_checkpoint(n)
        s = checkpoint.get('s', mpz(4)) if checkpoint else mpz(4)
        start_iter = checkpoint.get('iteration', 0) if checkpoint else 0

        if n < self.fft_threshold:
            r = n + 1
            m_inv = invert(mpz(2**r - 1), m)
            s = self._to_montgomery(s, m, r) if start_iter == 0 else s
            for i in range(start_iter, iterations):
                s = self._montgomery_mult(s, s, m, n, r, m_inv)
                s = sub(s, 2) if s >= 2 else add(s, m - 2)
                if i % 1000 == 0 and i > 0:
                    self._save_checkpoint(n, i, s)
                    self._logger.debug(f"Progress: {i}/{iterations} for M_{n}")
            s_normal = self._from_montgomery(s, m, r, m_inv)
            result = s_normal == 0
            self._logger.info(f"M_{n} test (Montgomery) completed in {time.time() - start_time:.2f}s: {'prime' if result else 'composite'}")
            os.remove(self._checkpoint_file) if os.path.exists(self._checkpoint_file) else None
            return result

        chunk_size = max(1, iterations // self.threads)
        chunks = [(max(start_iter, i * chunk_size), min((i + 1) * chunk_size, iterations)) 
                  for i in range(self.threads) if i * chunk_size < iterations]

        with ThreadPoolExecutor(max_workers=self.threads) as executor:
            s_current = s
            for chunk_idx, (start, end) in enumerate(chunks):
                future = executor.submit(self._lucas_lehmer_chunk_fft, n, start, end, m, s_current)
                s_current = future.result()
                self._save_checkpoint(n, end, s_current)
                if chunk_idx % max(1, self.threads // 4) == 0:
                    self._logger.debug(f"Chunk {chunk_idx+1}/{len(chunks)} completed for M_{n}")
        
        result = s_current == 0
        self._logger.info(f"M_{n} test (FFT) completed in {time.time() - start_time:.2f}s: {'prime' if result else 'composite'}")
        os.remove(self._checkpoint_file) if os.path.exists(self._checkpoint_file) else None
        return result

    def _lucas_lehmer_chunk_fft(self, n: int, start: int, end: int, m: mpz, s_start: mpz) -> mpz:
        """Perform a chunk of Lucas-Lehmer iterations with FFT multiplication"""
        s = s_start
        for _ in range(start, end):
            s = self._fft_mult(s, s, m, n)
            s = sub(s, 2) if s >= 2 else add(s, m - 2)
        return s

    def _save_checkpoint(self, n: int, iteration: int, s: mpz):
        """Save Lucas-Lehmer progress to a checkpoint file"""
        with open(self._checkpoint_file, 'wb') as f:
            pickle.dump({'n': n, 'iteration': iteration, 's': s}, f)

    def _load_checkpoint(self, n: int) -> dict:
        """Load Lucas-Lehmer progress from a checkpoint file"""
        if os.path.exists(self._checkpoint_file):
            with open(self._checkpoint_file, 'rb') as f:
                data = pickle.load(f)
                if data['n'] == n:
                    return data
        return {}

    def test_mersenne_prime(self, n: int) -> bool:
        """Test if 2^n - 1 is a Mersenne prime"""
        self._logger.info(f"Testing M_{n} = 2^{n} - 1 ({int(n * math.log10(2)) + 1} digits)")
        return self._lucas_lehmer_fft(n)

    def _compute_interference(self, x: int, diffs: List[int], t: float = 1.0) -> Tuple[float, int]:
        """Generalized helical interference function for any prime pattern"""
        primes = []
        for p in range(3, x + 1, 2):
            if all(self._is_prime_fast(p + d) for d in [0] + diffs):
                primes.append(p)
        if not primes:
            return 0.0, 0
        log_p = np.log(primes)
        weights = log_p ** 2
        phase = t * (len(diffs) + 1) * log_p + 1  # Simplified phase
        I = np.sum(weights * np.exp(1j * phase.astype(np.complex128)))
        return float(abs(I)), len(primes)

    def predict_prime_pattern_helical(self, start: int, end: int, diffs: List[int], window_size: Optional[int] = None) -> Optional[Tuple[int, ...]]:
        """Predict largest prime pattern with helical interference and adaptive window sizing"""
        def evaluate_window(start_w, end_w):
            mag, count = self._compute_interference(end_w, diffs, t=1.0)
            primes = [p for p in range(start_w, end_w + 1, 2) if 
                      all(self._is_prime_fast(p + d) for d in [0] + diffs)]
            return (primes[-1] if primes else None, mag, count)

        if window_size is None:  # Adaptive window size based on density
            window_size = max(1000, int(10000 * (math.log(end) / math.log(start)) ** 2))

        largest_pattern = None
        max_magnitude = 0.0
        total_count = 0
        windows = [(start + i * window_size, min(start + (i + 1) * window_size, end)) 
                   for i in range((end - start) // window_size + 1)]

        with ThreadPoolExecutor(max_workers=self.threads) as executor:
            results = list(executor.map(lambda w: evaluate_window(w[0], w[1]), windows))
            for p, mag, count in results:
                total_count += count
                if p and mag > max_magnitude:
                    largest_pattern = tuple(p + d for d in [0] + diffs)
                    max_magnitude = mag
                    self._logger.info(f"Pattern candidate: {largest_pattern}, |I| = {mag:.2e}")

        self._logger.info(f"Total patterns found in range {start} to {end}: {total_count}")
        return largest_pattern

    # Specific pattern predictors using the generalized method
    def predict_prime_triplets_helical(self, start: int, end: int, window_size: Optional[int] = None) -> Optional[Tuple[int, int, int]]:
        return self.predict_prime_pattern_helical(start, end, [2, 6], window_size)

    def predict_twin_primes_helical(self, start: int, end: int, window_size: Optional[int] = None) -> Optional[Tuple[int, int]]:
        return self.predict_prime_pattern_helical(start, end, [2], window_size)

    def predict_prime_quadruplets_helical(self, start: int, end: int, window_size: Optional[int] = None) -> Optional[Tuple[int, int, int, int]]:
        return self.predict_prime_pattern_helical(start, end, [2, 6, 8], window_size)

def main():
    hnp_u = HelixNovaPrimeU(threads=8, fft_threshold=10000, use_gpu=True)

    # Test small Mersenne primes
    print("\nTesting small Mersenne primes:")
    small_tests = [2, 3, 5, 7, 13, 17, 19, 31]
    for n in small_tests:
        result = hnp_u.test_mersenne_prime(n)
        print(f"M_{n} = 2^{n} - 1 is prime: {result}")

    # Predict largest prime triplet
    print("\nPredicting largest prime triplet in range 10^15 to 10^15 + 10^6:")
    triplet = hnp_u.predict_prime_triplets_helical(10**15, 10**15 + 10**6)
    if triplet:
        print(f"Largest helical-predicted prime triplet: {triplet}")

    # Predict largest twin prime
    print("\nPredicting largest twin prime in range 10^15 to 10^15 + 10^6:")
    twin = hnp_u.predict_twin_primes_helical(10**15, 10**15 + 10**6)
    if twin:
        print(f"Largest helical-predicted twin prime: {twin}")

    # Predict largest prime quadruplet
    print("\nPredicting largest prime quadruplet in range 10^15 to 10^15 + 10^6:")
    quad = hnp_u.predict_prime_quadruplets_helical(10**15, 10**15 + 10**6)
    if quad:
        print(f"Largest helical-predicted prime quadruplet: {quad}")

    # Example of custom pattern: (p, p+4, p+6)
    print("\nPredicting largest custom pattern (p, p+4, p+6) in range 10^15 to 10^15 + 10^6:")
    custom = hnp_u.predict_prime_pattern_helical(10**15, 10**15 + 10**6, [4, 6])
    if custom:
        print(f"Largest helical-predicted custom pattern: {custom}")

if __name__ == "__main__":
    main()

# MIT License
"""
Copyright (c) 2025 Harshkumar Gohil and Grok (xAI)
"""
